# Copyright (c) 2016-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant
# of patent rights can be found in the PATENTS file in the same directory.

# WARNING: Changes to this file will not be reflected until the
# running nginx instance is explicity reloaded `nginx -s reload` or
# restarted.

server {
    listen 80;
    listen 443 ssl;
    keepalive_timeout 200;
    keepalive_requests 300;
    server_name localhost etagecom.io www.etagecom.io api.etagecom.io local.etagecom.io staging.etagecom.io staff.etagecom.io api-int.etagecom.io;
    access_log /var/log/nginx/etagecom.io_access.log;
    error_log /var/log/nginx/etagecom.io_error.log;

    set $cond "";
    set $rewrite_host $host;
    if ($http_x_forwarded_proto != "https") {
        set $cond "!https";
    }
    if ($request_method = "POST") {
        set $cond "${cond}:post";
    }
    if ($remote_addr = "127.0.0.1") {
        set $cond "${cond}:localhost";
    }
    # If we're requesting the status over HTTP, don't force HTTPS
    if ($request_uri = "/django-status") {
        set $cond "";
    }
    # If a request comes in with the HOST set to an IP address, we can assume
    # it is being originatd internally because our network security groups only
    # allow the ELB to access the webserver. We can safely rewrite the host
    # header to localhost so that it can pass the django ALLOWED_HOSTS check
    if ($host ~ "\d+\.\d+\.\d+\.\d+") {
        set $rewrite_host "localhost";
    }

    # The variable $cond encapsulates the 3 factors we care about in determining
    # how to handle non-https messages:
    # 1) Accept only if they come from localhost - the suffix 'localhost' in the
    # $cond variable causes the two conditionals below to fail and be skipped.
    # 2) Send standard 301 to any non-POST request (no 'post' suffix)
    # 3) Send a 405 reponse to POST requests, since otherwise clients will turn
    # them into GET on receiving the 301 response.
    if ($cond = "!https") {
      return 301 https://$host$request_uri;
    }
    if ($cond = "!https:post") {
       return 405;
    }

    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

    real_ip_header X-Forwarded-For;
    set_real_ip_from 172.16.0.0/16;

    location / {
        uwsgi_pass  unix:///tmp/endaga.com.sock;
        include     uwsgi_params;
    }

    location /internal/api {
        uwsgi_pass  unix:///tmp/endaga.com.sock;
        include     uwsgi_params;

        allow 172.16.0.0/16;
        allow 127.0.0.1;
        deny all;
    }

    location /sason {
        uwsgi_pass  unix:///tmp/endaga.com.sock;
        include     uwsgi_params;

        allow 172.16.0.0/16;
        allow 127.0.0.1;
        deny all;
    }

    location  /static/ {
        alias  /var/www/static/;
    }

    location /django-status {
        uwsgi_pass  unix:///tmp/endaga.com.sock;
        include     uwsgi_params;
        uwsgi_param HTTP_HOST $rewrite_host;

        allow 172.16.0.0/16;
        allow 127.0.0.1;
        deny all;
    }

    location /testing {
        return 200 'still kickin it';
        add_header Content-Type text/plain;
    }
}
